Proyecto de un manejador sencillo de contraseñas:

Agregar nuevas contraseñas
Borrar contraseñas
Encriptar - Desencriptar passwords (Crypto)

Front: React JS & Material UI
Back: Node JS & Express creacion de api
BD: MySQL

Episodio 1

La idea es poder tener todas las contraseñas de los servicios en un solo lugar almacenadas de manera segura y encriptada, 
por razones de seguridad no permitirá agregar contraseñas básicas

Se crea la carpeta del proyecto:
/PASSWORD MANAGER

Dentro se crean 2 carpetas:
/client: Almacena la aplicacion de React
/server: Almacena la aplicacion creada con Node y Express

En la carpeta cliente se instala la aplicacion de React:
#npx create-react-app .

/server 

En el servidor es necesario iniciar la aplicacion de nodeJS e instalar Express:
#npm init
#npm install express mysql 

Es necesario instalar cors el cual permite la conexion entre la api de front y la api del back 
#npm install cors 

Ahora es necesario crear el punto de entrada para nuestro servidor, en package.json muestra por defecto a index.js 
por lo tanto se crea un archivo con este nombre.

En este archivo se llama a express y se crea una variable puerto que almacena
el puerto de conexion, sera 3001 ya que React corre en el 3000

Al metodo listen se pasa el puerto y una funcion que se va a ejecutar cuando el servidor
establece conexion.

Se verifica la conexion con el parametro:
#node index.js 
Cannot GET / -> Significa que la api esta corriendo pero aun no se le han creado rutas

Se crea una funcion GET con la ruta / para hacer una prueba de las rutas

Para no estar reiniciando el servidor cada que se haga un cambio se instala el modulo nodemon
#npm install nodemon 

Se hace un cambio en /package.json, se agrega un atributo scripts,
dentro del cual va otro atributo start : "nodemon index.js", de esta manera cada que se llama a start 
se ejecuta este comando para que los cambios se actualicen solos.
con el siguiente comando se ejecuta la aplicacion
#npm start

Ahora se va a hacer conexion con la base de datos, para lo cual se descarga
la herramienta MYSQL Workbench. que requiere mysql-server corriendo en el equipo

Se crea un nuevo esquema en la instancia local de la base de datos en el puerto 3306
con el nombre 'PasswordManager', que será la base de datos para este proyecto 
Dentro de esta se crea una tabla llamada passwords, con los campos:
{
    id:primary key not null, auto incremental,
    name: website name,
    url: website url exact login,
    username: email to log into the website,
    password: ****** password for the site
    }

Se le da apply en la esquina derecha para crear la tabla.

Para conectar la aplicacion con la tabla, es necesario llamar el modulo de mysql, para crear la 
conexion es necesario crear un objeto db, que representa todas las querys a la base de datos, este objeto tiene
unos parametros que pertenecen a la configuracion de mysql

/client 

Luego se pasa al lado del cliente en react, en esta carpeta, hay una que se llama
src que tiene algunos archivos que no son utiles:
App.text.js, index.css, logo.svg, setupTest.js
por lo que se borran, ademas se eliminan todas las referencias a estos archivos
en /index.js a index.css 
en /app.js a logo y se deja limpio el archivo app.js para comenzar a crear la estructura html

En App.css se le da estilo al front de la aplicacion de react para poder trabajar con ella

Para comenzar la aplicacion en react es necesario:
#npm start

Ahora hay que encontrar la manera en como se va a enviar la informacion del front que se escriba en los formularios
al back de node JS, esto se va a hacer a traves de estados o states,
las cuales son variables con laas que se pueden desencadenar renders o vistas
cuando se cambien los valores
Lo primero es importar userState del modulo de react 
Luego se crean las variables que almacenaran los cambios, una por cada celda 
Despues se programan los estados dentro de las cajas de texto, para qeu cada que cambie la celda, almacene los datos
dentro de la variable correspondiente, co una funcion onChange que detecta los cambios
Co esto se tienen las variables que se le quieren enviar a la base de datos

En este momento ya se puede ingresar datos a la base de datos, solo se necesita crear la ruta en el backend accesible
para insertar esos datos

Para esto se va a /server/index.js y se crea una ruta post en "/addpassword"
Es necesario acceder a los datos que existen en el formulario del frontend a través del
objeto body del metodo req, se crea una variable que almacena los valores a insertar en la base de datos en orden
Luego se llama al metodo query del objeto db que permite 
{
generar una sentencia sql directamente para escribir valores en la base de datos, agregados como ?,
Un array con los datos a pasar en la sentencia,
Se toman dos valores de este query, que funciona como una promesa que se ejecuta cuando se cumple la funcion
    err:almacena cualquier error que pueda producir el query -> se imprime en consola
    result: contiene los mensajes que se le piden al frontend en caso que sea exitoso el query, escribir datos en la bd -> se envia un mensaje de exito
 }

Para acceder y hacer una llamado al api de la ruta /addpassword es necesario instalar el modulo axios en el frontend
se ingresa al directorio del cliente y se instala como un modulo npm (npm install axios)
Axios es una libreria que permite hacer consultas api a cualquier api.

Tambien se puede usar fetch que es una funcion de javascript, pero axios es mas sencillo
simplemente se importa en app.js (client) y se hace un api request cuando se de click en el boton "add password"
se agrega la funcion onclick al boton en app.js que va a invocar una funcion addpassword que ejecutara la sentencia 

Es necesario crear la funcion addpassword en donde lo unico que se hace es invocar axios y hacer un post request
al endpoint o url de una api, en nuestro caso es 'http://localhost:3001/addpassword' la ruta creada en el 
server. Al ser un post es necesario pasar los datos, se hace luego de la ruta a traves del objeto body pasando los datos
que esta esperando en el lado del server, asignando los valores a cada una de las variables.
Se prueba ingresando datos al formulario de react para ver is esta funcionando
En este momento se obtienen 2 errores, uno es que no se ha usado cors, y lo otro es que no se ha 
confifurado el backend para que parsee json desde el frontend.
Para solucionar esto es necesario importar cors en el servidor, luego usarlo a traves de la app
y luego usar express.json a traves de la app tambien para que el servidor interprete los json que vienen del frontend.

Episodio 2
